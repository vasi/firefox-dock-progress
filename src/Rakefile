Rake.application.options.threads = `sysctl -n hw.ncpu`.to_i

@sdks = {}
def findsdk(sdk)
  return @sdks[sdk] if @sdks.include?(sdk)
  return @sdks[sdk] = findsdk_i(sdk)
end
def findsdk_i(sdk)
  path = `xcodebuild -version -sdk macosx#{sdk} Path 2>/dev/null`
  return path.strip if $?.success?
  
  file = "MacOSX#{sdk}.sdk"
  ["/Developer", "/Xcode3"].each do |root|
    p = File.join(root, 'SDKs', file)
    return p if File.exist?(p)
  end
  nil
end
@gcc40 = nil
def gcc40
  @gcc40 = begin; `gcc-4.0 -v 2>/dev/null`; $?.success?; end if @gcc40.nil?
  @gcc40
end
def prelion; gcc40 && findsdk('10.4u'); end

# Decide what SDKs we want for each arch
def native_arch; @native ||= `arch`.chomp; end
def archsdkid(a)
  return '10.4u' if a != 'x86_64' && prelion
  return '10.6'
end

def archsdk(a); findsdk(archsdkid(a)); end
def archtarg(a)
  "-mmacosx-version-min=#{archsdkid(a).match(/\d\d\.\d/)[0]}"
end
def archcc(a)
  compiler = (a != 'x86_64' && prelion) ? 'gcc-4.0' : 'clang'
  [compiler, '-arch', a, archtarg(a), '-Wall']
end
# Allow flags to expand to include arch-dependent data
def archxflags(x, a); x.respond_to?(:to_proc) ? x[a] : x; end


# Build something for a particular arch
def compile(target, arch, xflags, strflags)
  sh *(archcc(arch) + archxflags(xflags, arch) + strflags +
    ['-isysroot', archsdk(arch), '-c', '-o', target.name,
      target.prerequisites.first])
end
def xlink(target, arch, xflags, strflags)
  sh *(archcc(arch) + archxflags(xflags, arch) + strflags +
    ["-Wl,-syslibroot,#{archsdk(arch)}", '-o', target.name] +
    target.prerequisites)
end
def lipo(target)
  sh *(%w[lipo -create -output] + [target.name] + target.prerequisites)
end


# Filename-munging: Substitute based on ext; add basename suffix; add arch suf
def subext(s, repl); s.sub(/(\.[^.]*|)$/, repl); end
def sufs(s, suf)
  suf = suf[:suffix] if Hash === suf
  subext(s, (suf || '') + '\1')
end
def sufa(s, arch); subext(s, '-' + arch + '\1'); end

# Build a universal binary
def universal(opts)
  output, input, cflags, ldflags, opt =
    [:output, :input, :cflags, :ldflags, :opt].map { |k| opts[k] || [] }
  single = opts[:arch].size == 1
  
  to_compile = input.grep(/\.(mm|m|c|cc|cpp)$/)
  link_add = input.grep(/\.(dylib|so)$/)
  compile_add = input - to_compile - link_add
  
  to_lipo = []
  opts[:arch].each do |arch|
    next if arch == 'ppc' && !prelion
    to_link = []
    to_compile.each do |src|
      to_link << sufs(sufa(subext(src, '.o'), arch), opts)
      file to_link.last => ([src] + compile_add) do |t|
        compile(t, arch, cflags, opt)
      end
    end
    
    to_lipo << sufs(single ? output : sufa(output, arch), opts)
    file to_lipo.last => (to_link + link_add) do |t|
      xlink(t, arch, ldflags, opt)
    end
  end
  file(sufs(output, opts) => to_lipo) { |t| lipo(t) } unless single
  return output
end


# Define how to build our binaries
COMMON_CFLAGS = %w[-fno-exceptions -fPIC -fno-strict-aliasing
  -fpascal-strings -fno-common -fshort-wchar]  

def clib(opts)
  universal(opts.merge(
    :output => 'DockProgressC.dylib',
    :input => %w[DockProgressC.m DockProgressC.h],
    :ldflags => COMMON_CFLAGS + %w[-framework Cocoa -dynamiclib
      -install_name @loader_path/../chrome/content/DockProgressC.dylib]))
end


# Define build styles
STYLES = {}
def style(name, clib_arch, opts)
  STYLES[name] = {
    :clib => clib(opts.merge(:arch => clib_arch)),
  }
  task name => STYLES[name].values.map { |f| sufs(f, opts) }
  STYLES[name][:suf] = opts[:suffix]
end
style(:release, %w[ppc i386 x86_64], :opt => %w[-Os])
style(:debug, [native_arch], :opt => %w[-O0 -g],
  :suffix => '-debug')


# Install tasks
def xinstall(src, dst, suf = nil)
  ln sufs(src, suf), File.join(dst, src), :force => true
end
STYLES.each do |n, v|
  task sufs('install', v[:suf]) => n do |t|
    xinstall(v[:clib], '../chrome/content/', v[:suf])
  end
end


require 'rake/clean'
CLEAN.include('*.o', '*.so', '*.dylib')
task :default => :release
